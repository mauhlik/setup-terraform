name: 'Setup Terraform'
description: 'Wrapper around the HashiCorp Terraform Setup Action'
author: 'MaUhlik-cen56998'
branding:
  icon: 'terminal'
  color: 'purple'
inputs:
  cli-config-credentials-hostname:
    description: 'The hostname of a HCP Terraform/Terraform Enterprise instance to place within the credentials block of the Terraform CLI configuration file. Defaults to `app.terraform.io`.'
    default: 'app.terraform.io'
    required: false
  cli-config-credentials-token:
    description: 'The API token for a HCP Terraform/Terraform Enterprise instance to place within the credentials block of the Terraform CLI configuration file.'
    required: false
  terraform-version:
    description: 'The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.'
    default: 'latest'
    required: false
  terraform-wrapper:
    description: 'Whether or not to install a wrapper to wrap subsequent calls of the `terraform` binary and expose its STDOUT, STDERR, and exit code as outputs named `stdout`, `stderr`, and `exitcode` respectively. Defaults to `true`.'
    default: 'true'
    required: false
  terraform-version-file:
    description: 'The path to a file containing the version of Terraform CLI to install. The file should contain a single line with the version string. This input takes precedence over the `terraform-version` input.'
    required: false
    default: ''
outputs:
  version:
    description: 'The version of Terraform CLI that was installed.'
    value: ${{ steps.select-terraform-version.outputs.version }}
runs:
  using: 'composite'
  steps:
    - name: Choose Terraform version
      id: select-terraform-version
      shell: bash
      run: |
        if [ -n "${TERRAFORM_VERSION_FILE}" ]; then
          if [ -f "${TERRAFORM_VERSION_FILE}" ]; then
            echo "Terraform version file found: ${TERRAFORM_VERSION_FILE}"
            TERRAFORM_VERSION=$(cat "${TERRAFORM_VERSION_FILE}")
            echo "Terraform version set to: ${TERRAFORM_VERSION}"
            echo "version=${TERRAFORM_VERSION}" >> "$GITHUB_OUTPUT"
          else
            echo "::error::Terraform version file not found: ${TERRAFORM_VERSION_FILE}"
            exit 1
          fi
        else
          echo "version=${TERRAFORM_VERSION_INPUT}" >> "$GITHUB_OUTPUT"
        fi
      env:
        TERRAFORM_VERSION_INPUT: ${{ inputs.terraform-version }}
        TERRAFORM_VERSION_FILE: ${{ inputs.terraform-version-file }}

    - name: Setup Terraform
      id: setup-terraform
      uses: hashicorp/setup-terraform@v3.1.1
      with:
        cli_config_credentials_hostname: ${{ inputs.cli-config-credentials-hostname }}
        cli_config_credentials_token: ${{ inputs.cli-config-credentials-token }}
        terraform_version: ${{ steps.select-terraform-version.outputs.version }}
        terraform_wrapper: ${{ inputs.terraform-wrapper }}